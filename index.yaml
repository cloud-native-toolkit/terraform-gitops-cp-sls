id: github.com/cloud-native-toolkit/terraform-gitops-cp-sls
name: gitops-cp-sls
alias: sls
type: gitops
description: "Module to populate a gitops repository for IBM SLS service"
tags:
  - gitops
  - cloudpak
  - ibm
  - license
softwareProvider: ibm-cp
versions: [{platforms: [ocp4], providers: [{name: gitops, source: "cloud-native-toolkit/gitops"}], dependencies: [{id: gitops, refs: [{source: github.com/cloud-native-toolkit/terraform-tools-gitops.git, version: ">= 1.1.0"}]}, {id: catalogs, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-cp-catalogs.git, version: ">= 1.0.0"}]}, {id: namespace, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-namespace.git, version: ">= 1.0.0"}]}, {id: mongodb, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-mongo-ce.git, version: ">= 1.0.0"}]}], variables: [{name: gitops_config, moduleRef: {id: gitops, output: gitops_config}, type: "object({\n    boostrap = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    infrastructure = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    services = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    applications = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n  })", description: Config information regarding the gitops repo structure}, {name: git_credentials, moduleRef: {id: gitops, output: git_credentials}, type: "list(object({\n    repo = string\n    url = string\n    username = string\n    token = string\n  }))", description: The credentials for the gitops repo(s)}, {name: server_name, moduleRef: {id: gitops, output: server_name}, type: string, description: The name of the server, default: default, optional: true}, {name: namespace, moduleRef: {id: namespace, output: name}, type: string, description: The namespace where the application should be deployed, default: ibm-sls, optional: true}, {name: kubeseal_cert, moduleRef: {id: gitops, output: sealed_secrets_cert}, type: string, description: The certificate/public key used to encrypt the sealed secrets, default: "", optional: true}, {name: catalog, moduleRef: {id: catalogs, output: catalog_ibmoperators}, type: string, description: The catalog source that should be used to deploy the operator, default: ibm-operator-catalog, optional: true}, {name: mongo_userid, moduleRef: {id: mongodb, output: username}, type: string, description: "mongodb admin userid, should stay admin in most cases\n  sensitive   = true", default: admin, optional: true}, {name: mongo_dbpass, moduleRef: {id: mongodb, output: password}, type: string, description: "mongodb password\n  sensitive   = true"}, {name: mongo_namespace, moduleRef: {id: mongodb, output: namespace}, type: string, description: namespace for mongo}, {name: mongo_port, moduleRef: {id: mongodb, output: port}, type: string, description: The port used by the the mongo instance}, {name: mongo_svcname, moduleRef: {id: mongodb, output: svcname}, type: string, description: service name for mongo}, {name: cluster_ingress, type: string, description: Ingress for cluster}, {name: catalog_namespace, type: string, description: The namespace where the catalog has been deployed, default: openshift-marketplace, optional: true}, {name: channel, type: string, description: The channel that should be used to deploy the operator, default: 3.x, optional: true}, {name: entitlement_key, type: string, description: IBM entitlement key for MAS}], version: v2.3.2, outputs: [{name: instance_name, description: The name of the module}, {name: operator_name, description: The name of the module}, {name: branch, description: The branch where the module config has been placed}, {name: namespace, description: The namespace where the module will be deployed}, {name: server_name, description: The server where the module will be deployed}, {name: layer, description: The layer where the module is deployed}, {name: instance_type, description: The type of module where the module is deployed}, {name: operator_type, description: The type of module where the module is deployed}]}, {platforms: [ocp4], providers: [{name: gitops, source: "cloud-native-toolkit/gitops"}], dependencies: [{id: gitops, refs: [{source: github.com/cloud-native-toolkit/terraform-tools-gitops.git, version: ">= 1.1.0"}]}, {id: catalogs, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-cp-catalogs.git, version: ">= 1.0.0"}]}, {id: namespace, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-namespace.git, version: ">= 1.0.0"}]}, {id: mongodb, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-mongo-ce.git, version: ">= 1.0.0"}]}], variables: [{name: gitops_config, moduleRef: {id: gitops, output: gitops_config}, type: "object({\n    boostrap = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    infrastructure = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    services = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    applications = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n  })", description: Config information regarding the gitops repo structure}, {name: git_credentials, moduleRef: {id: gitops, output: git_credentials}, type: "list(object({\n    repo = string\n    url = string\n    username = string\n    token = string\n  }))", description: The credentials for the gitops repo(s)}, {name: server_name, moduleRef: {id: gitops, output: server_name}, type: string, description: The name of the server, default: default, optional: true}, {name: namespace, moduleRef: {id: namespace, output: name}, type: string, description: The namespace where the application should be deployed}, {name: kubeseal_cert, moduleRef: {id: gitops, output: sealed_secrets_cert}, type: string, description: The certificate/public key used to encrypt the sealed secrets, default: "", optional: true}, {name: catalog, moduleRef: {id: catalogs, output: catalog_ibmoperators}, type: string, description: The catalog source that should be used to deploy the operator, default: ibm-operator-catalog, optional: true}, {name: mongo_userid, moduleRef: {id: mongodb, output: username}, type: string, description: "mongodb admin userid, should stay admin in most cases\n  sensitive   = true", default: admin, optional: true}, {name: mongo_dbpass, moduleRef: {id: mongodb, output: password}, type: string, description: "mongodb password\n  sensitive   = true"}, {name: mongo_namespace, moduleRef: {id: mongodb, output: namespace}, type: string, description: namespace for mongo}, {name: mongo_port, moduleRef: {id: mongodb, output: port}, type: string, description: The port used by the the mongo instance}, {name: mongo_svcname, moduleRef: {id: mongodb, output: svcname}, type: string, description: service name for mongo}, {name: cluster_ingress, type: string, description: Ingress for cluster}, {name: catalog_namespace, type: string, description: The namespace where the catalog has been deployed, default: openshift-marketplace, optional: true}, {name: channel, type: string, description: The channel that should be used to deploy the operator, default: 3.x, optional: true}, {name: entitlement_key, type: string, description: IBM entitlement key for MAS}], version: v2.3.1, outputs: [{name: instance_name, description: The name of the module}, {name: operator_name, description: The name of the module}, {name: branch, description: The branch where the module config has been placed}, {name: namespace, description: The namespace where the module will be deployed}, {name: server_name, description: The server where the module will be deployed}, {name: layer, description: The layer where the module is deployed}, {name: instance_type, description: The type of module where the module is deployed}, {name: operator_type, description: The type of module where the module is deployed}]}, {platforms: [ocp4], providers: [{name: gitops, source: "cloud-native-toolkit/gitops"}], dependencies: [{id: gitops, refs: [{source: github.com/cloud-native-toolkit/terraform-tools-gitops.git, version: ">= 1.1.0"}]}, {id: catalogs, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-cp-catalogs.git, version: ">= 1.0.0"}]}, {id: namespace, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-namespace.git, version: ">= 1.0.0"}]}, {id: mongodb, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-mongo-ce.git, version: ">= 1.0.0"}]}], variables: [{name: gitops_config, moduleRef: {id: gitops, output: gitops_config}, type: "object({\n    boostrap = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    infrastructure = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    services = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    applications = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n  })", description: Config information regarding the gitops repo structure}, {name: git_credentials, moduleRef: {id: gitops, output: git_credentials}, type: "list(object({\n    repo = string\n    url = string\n    username = string\n    token = string\n  }))", description: The credentials for the gitops repo(s)}, {name: server_name, moduleRef: {id: gitops, output: server_name}, type: string, description: The name of the server, default: default, optional: true}, {name: namespace, moduleRef: {id: namespace, output: name}, type: string, description: The namespace where the application should be deployed}, {name: kubeseal_cert, moduleRef: {id: gitops, output: sealed_secrets_cert}, type: string, description: The certificate/public key used to encrypt the sealed secrets, default: "", optional: true}, {name: catalog, moduleRef: {id: catalogs, output: catalog_ibmoperators}, type: string, description: The catalog source that should be used to deploy the operator, default: ibm-operator-catalog, optional: true}, {name: mongo_userid, moduleRef: {id: mongodb, output: username}, type: string, description: "mongodb admin userid, should stay admin in most cases\n  sensitive   = true", default: admin, optional: true}, {name: mongo_dbpass, moduleRef: {id: mongodb, output: password}, type: string, description: "mongodb password\n  sensitive   = true"}, {name: mongo_namespace, moduleRef: {id: mongodb, output: namespace}, type: string, description: namespace for mongo}, {name: mongo_port, moduleRef: {id: mongodb, output: port}, type: string, description: The port used by the the mongo instance}, {name: mongo_svcname, moduleRef: {id: mongodb, output: svcname}, type: string, description: service name for mongo}, {name: cluster_ingress, type: string, description: Ingress for cluster}, {name: catalog_namespace, type: string, description: The namespace where the catalog has been deployed, default: openshift-marketplace, optional: true}, {name: channel, type: string, description: The channel that should be used to deploy the operator, default: 3.x, optional: true}, {name: entitlement_key, type: string, description: IBM entitlement key for MAS}], version: v2.3.0, outputs: [{name: instance_name, description: The name of the module}, {name: operator_name, description: The name of the module}, {name: branch, description: The branch where the module config has been placed}, {name: namespace, description: The namespace where the module will be deployed}, {name: server_name, description: The server where the module will be deployed}, {name: layer, description: The layer where the module is deployed}, {name: instance_type, description: The type of module where the module is deployed}, {name: operator_type, description: The type of module where the module is deployed}]}, {platforms: [ocp4], providers: [{name: gitops, source: "cloud-native-toolkit/gitops"}], dependencies: [{id: gitops, refs: [{source: github.com/cloud-native-toolkit/terraform-tools-gitops.git, version: ">= 1.1.0"}]}, {id: catalogs, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-cp-catalogs.git, version: ">= 1.0.0"}]}, {id: namespace, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-namespace.git, version: ">= 1.0.0"}]}, {id: mongodb, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-mongo-ce.git, version: ">= 1.0.0"}]}], variables: [{name: gitops_config, moduleRef: {id: gitops, output: gitops_config}, type: "object({\n    boostrap = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    infrastructure = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    services = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    applications = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n  })", description: Config information regarding the gitops repo structure}, {name: git_credentials, moduleRef: {id: gitops, output: git_credentials}, type: "list(object({\n    repo = string\n    url = string\n    username = string\n    token = string\n  }))", description: The credentials for the gitops repo(s)}, {name: server_name, moduleRef: {id: gitops, output: server_name}, type: string, description: The name of the server, default: default, optional: true}, {name: namespace, moduleRef: {id: namespace, output: name}, type: string, description: The namespace where the application should be deployed}, {name: kubeseal_cert, moduleRef: {id: gitops, output: sealed_secrets_cert}, type: string, description: The certificate/public key used to encrypt the sealed secrets, default: "", optional: true}, {name: catalog, moduleRef: {id: catalogs, output: catalog_ibmoperators}, type: string, description: The catalog source that should be used to deploy the operator, default: ibm-operator-catalog, optional: true}, {name: mongo_userid, moduleRef: {id: mongodb, output: username}, type: string, description: "mongodb admin userid, should stay admin in most cases\n  sensitive   = true", default: admin, optional: true}, {name: mongo_dbpass, moduleRef: {id: mongodb, output: password}, type: string, description: "mongodb password\n  sensitive   = true"}, {name: mongo_namespace, moduleRef: {id: mongodb, output: namespace}, type: string, description: namespace for mongo}, {name: mongo_cacrt, moduleRef: {id: mongodb, output: cacrt}, type: string, description: The CA certificate for the mongo instance}, {name: mongo_port, moduleRef: {id: mongodb, output: port}, type: string, description: The port used by the the mongo instance}, {name: mongo_svcname, moduleRef: {id: mongodb, output: svcname}, type: string, description: service name for mongo}, {name: cluster_ingress, type: string, description: Ingress for cluster}, {name: catalog_namespace, type: string, description: The namespace where the catalog has been deployed, default: openshift-marketplace, optional: true}, {name: channel, type: string, description: The channel that should be used to deploy the operator, default: 3.x, optional: true}, {name: entitlement_key, type: string, description: IBM entitlement key for MAS}], version: v2.2.1, outputs: [{name: instance_name, description: The name of the module}, {name: operator_name, description: The name of the module}, {name: branch, description: The branch where the module config has been placed}, {name: namespace, description: The namespace where the module will be deployed}, {name: server_name, description: The server where the module will be deployed}, {name: layer, description: The layer where the module is deployed}, {name: instance_type, description: The type of module where the module is deployed}, {name: operator_type, description: The type of module where the module is deployed}]}, {platforms: [ocp4], providers: [{name: gitops, source: "cloud-native-toolkit/gitops"}], dependencies: [{id: gitops, refs: [{source: github.com/cloud-native-toolkit/terraform-tools-gitops.git, version: ">= 1.1.0"}]}, {id: catalogs, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-cp-catalogs.git, version: ">= 1.0.0"}]}, {id: namespace, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-namespace.git, version: ">= 1.0.0"}]}, {id: mongodb, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-mongo-ce.git, version: ">= 1.0.0"}]}], variables: [{name: gitops_config, moduleRef: {id: gitops, output: gitops_config}, type: "object({\n    boostrap = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    infrastructure = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    services = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    applications = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n  })", description: Config information regarding the gitops repo structure}, {name: git_credentials, moduleRef: {id: gitops, output: git_credentials}, type: "list(object({\n    repo = string\n    url = string\n    username = string\n    token = string\n  }))", description: The credentials for the gitops repo(s)}, {name: server_name, moduleRef: {id: gitops, output: server_name}, type: string, description: The name of the server, default: default, optional: true}, {name: namespace, moduleRef: {id: namespace, output: name}, type: string, description: The namespace where the application should be deployed}, {name: kubeseal_cert, moduleRef: {id: gitops, output: sealed_secrets_cert}, type: string, description: The certificate/public key used to encrypt the sealed secrets, default: "", optional: true}, {name: catalog, moduleRef: {id: catalogs, output: catalog_ibmoperators}, type: string, description: The catalog source that should be used to deploy the operator, default: ibm-operator-catalog, optional: true}, {name: sls_key, moduleRef: {id: catalogs, output: entitlement_key}, type: string, description: ibm container entitlement key for sls}, {name: mongo_userid, moduleRef: {id: mongodb, output: username}, type: string, description: "mongodb admin userid, should stay admin in most cases\n  sensitive   = true", default: admin, optional: true}, {name: mongo_dbpass, moduleRef: {id: mongodb, output: password}, type: string, description: "mongodb password\n  sensitive   = true"}, {name: mongo_namespace, moduleRef: {id: mongodb, output: namespace}, type: string, description: namespace for mongo}, {name: mongo_cacrt, moduleRef: {id: mongodb, output: cacrt}, type: string, description: The CA certificate for the mongo instance}, {name: mongo_port, moduleRef: {id: mongodb, output: port}, type: string, description: The port used by the the mongo instance}, {name: mongo_svcname, moduleRef: {id: mongodb, output: svcname}, type: string, description: service name for mongo}, {name: cluster_ingress, type: string, description: Ingress for cluster}, {name: catalog_namespace, type: string, description: The namespace where the catalog has been deployed, default: openshift-marketplace, optional: true}, {name: channel, type: string, description: The channel that should be used to deploy the operator, default: 3.x, optional: true}, {name: entitlementkey, type: string, description: IBM entitlement key for MAS}], version: v2.2.0, outputs: [{name: instance_name, description: The name of the module}, {name: operator_name, description: The name of the module}, {name: branch, description: The branch where the module config has been placed}, {name: namespace, description: The namespace where the module will be deployed}, {name: server_name, description: The server where the module will be deployed}, {name: layer, description: The layer where the module is deployed}, {name: instance_type, description: The type of module where the module is deployed}, {name: operator_type, description: The type of module where the module is deployed}]}, {platforms: [ocp4], providers: [{name: gitops, source: "cloud-native-toolkit/gitops"}], dependencies: [{id: gitops, refs: [{source: github.com/cloud-native-toolkit/terraform-tools-gitops.git, version: ">= 1.1.0"}]}, {id: catalogs, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-cp-catalogs.git, version: ">= 1.0.0"}]}, {id: namespace, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-namespace.git, version: ">= 1.0.0"}]}, {id: mongodb, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-mongo-ce.git, version: ">= 1.0.0"}]}], variables: [{name: gitops_config, moduleRef: {id: gitops, output: gitops_config}, type: "object({\n    boostrap = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    infrastructure = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    services = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    applications = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n  })", description: Config information regarding the gitops repo structure}, {name: git_credentials, moduleRef: {id: gitops, output: git_credentials}, type: "list(object({\n    repo = string\n    url = string\n    username = string\n    token = string\n  }))", description: The credentials for the gitops repo(s)}, {name: server_name, moduleRef: {id: gitops, output: server_name}, type: string, description: The name of the server, default: default, optional: true}, {name: namespace, moduleRef: {id: namespace, output: name}, type: string, description: The namespace where the application should be deployed}, {name: kubeseal_cert, moduleRef: {id: gitops, output: sealed_secrets_cert}, type: string, description: The certificate/public key used to encrypt the sealed secrets, default: "", optional: true}, {name: catalog, moduleRef: {id: catalogs, output: catalog_ibmoperators}, type: string, description: The catalog source that should be used to deploy the operator, default: ibm-operator-catalog, optional: true}, {name: sls_key, moduleRef: {id: catalogs, output: entitlement_key}, type: string, description: ibm container entitlement key for sls}, {name: mongo_userid, moduleRef: {id: mongodb, output: username}, type: string, description: 'mongodb admin userid, should stay admin in most cases', default: admin, optional: true}, {name: mongo_dbpass, moduleRef: {id: mongodb, output: password}, type: string, description: mongodb password}, {name: mongo_namespace, moduleRef: {id: mongodb, output: namespace}, type: string, description: namespace for mongo}, {name: mongo_cacrt, moduleRef: {id: mongodb, output: cacrt}, type: string, description: The CA certificate for the mongo instance}, {name: mongo_port, moduleRef: {id: mongodb, output: port}, type: string, description: The port used by the the mongo instance}, {name: mongo_svcname, moduleRef: {id: mongodb, output: svcname}, type: string, description: service name for mongo}, {name: cluster_ingress, type: string, description: Ingress for cluster}, {name: catalog_namespace, type: string, description: The namespace where the catalog has been deployed, default: openshift-marketplace, optional: true}, {name: channel, type: string, description: The channel that should be used to deploy the operator, default: 3.x, optional: true}], version: v2.1.0, outputs: [{name: instance_name, description: The name of the module}, {name: operator_name, description: The name of the module}, {name: branch, description: The branch where the module config has been placed}, {name: namespace, description: The namespace where the module will be deployed}, {name: server_name, description: The server where the module will be deployed}, {name: layer, description: The layer where the module is deployed}, {name: instance_type, description: The type of module where the module is deployed}, {name: operator_type, description: The type of module where the module is deployed}]}, {platforms: [ocp4], providers: [{name: gitops, source: "cloud-native-toolkit/gitops"}], dependencies: [{id: gitops, refs: [{source: github.com/cloud-native-toolkit/terraform-tools-gitops.git, version: ">= 1.1.0"}]}, {id: catalogs, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-cp-catalogs.git, version: ">= 1.0.0"}]}, {id: namespace, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-namespace.git, version: ">= 1.0.0"}]}, {id: mongodb, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-mongo-ce.git, version: ">= 1.0.0"}]}], variables: [{name: gitops_config, moduleRef: {id: gitops, output: gitops_config}, type: "object({\n    boostrap = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    infrastructure = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    services = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    applications = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n  })", description: Config information regarding the gitops repo structure}, {name: git_credentials, moduleRef: {id: gitops, output: git_credentials}, type: "list(object({\n    repo = string\n    url = string\n    username = string\n    token = string\n  }))", description: The credentials for the gitops repo(s)}, {name: server_name, moduleRef: {id: gitops, output: server_name}, type: string, description: The name of the server, default: default, optional: true}, {name: namespace, moduleRef: {id: namespace, output: name}, type: string, description: The namespace where the application should be deployed}, {name: kubeseal_cert, moduleRef: {id: gitops, output: sealed_secrets_cert}, type: string, description: The certificate/public key used to encrypt the sealed secrets, default: "", optional: true}, {name: catalog, moduleRef: {id: catalogs, output: catalog_ibmoperators}, type: string, description: The catalog source that should be used to deploy the operator, default: ibm-operator-catalog, optional: true}, {name: sls_key, moduleRef: {id: catalogs, output: entitlement_key}, type: string, description: ibm container entitlement key for sls}, {name: mongo_userid, moduleRef: {id: mongodb, output: username}, type: string, description: 'mongodb admin userid, should stay admin in most cases', default: admin, optional: true}, {name: mongo_dbpass, moduleRef: {id: mongodb, output: password}, type: string, description: mongodb password}, {name: mongo_namespace, moduleRef: {id: mongodb, output: namespace}, type: string, description: namespace for mongo}, {name: mongo_cacrt, moduleRef: {id: mongodb, output: cacrt}, type: string, description: The CA certificate for the mongo instance}, {name: mongo_port, moduleRef: {id: mongodb, output: port}, type: string, description: The port used by the the mongo instance}, {name: mongo_svcname, moduleRef: {id: mongodb, output: svcname}, type: string, description: service name for mongo}, {name: cluster_ingress, type: string, description: Ingress for cluster}, {name: sls_storageClass, type: string, description: Name for sls file storage class}, {name: catalog_namespace, type: string, description: The namespace where the catalog has been deployed, default: openshift-marketplace, optional: true}, {name: channel, type: string, description: The channel that should be used to deploy the operator, default: 3.x, optional: true}], version: v2.0.1, outputs: [{name: instance_name, description: The name of the module}, {name: operator_name, description: The name of the module}, {name: branch, description: The branch where the module config has been placed}, {name: namespace, description: The namespace where the module will be deployed}, {name: server_name, description: The server where the module will be deployed}, {name: layer, description: The layer where the module is deployed}, {name: instance_type, description: The type of module where the module is deployed}, {name: operator_type, description: The type of module where the module is deployed}]}, {platforms: [ocp4], providers: [{name: gitops, source: "cloud-native-toolkit/gitops"}], dependencies: [{id: gitops, refs: [{source: github.com/cloud-native-toolkit/terraform-tools-gitops.git, version: ">= 1.1.0"}]}, {id: catalogs, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-cp-catalogs.git, version: ">= 1.0.0"}]}, {id: cluster, refs: [], interface: github.com/cloud-native-toolkit/automation-modules#cluster}, {id: namespace, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-namespace.git, version: ">= 1.0.0"}]}, {id: mongodb, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-mongo-ce, version: ">= 1.0.0"}]}], variables: [{name: gitops_config, moduleRef: {id: gitops, output: gitops_config}, type: "object({\n    boostrap = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    infrastructure = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    services = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    applications = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n  })", description: Config information regarding the gitops repo structure}, {name: git_credentials, moduleRef: {id: gitops, output: git_credentials}, type: "list(object({\n    repo = string\n    url = string\n    username = string\n    token = string\n  }))", description: The credentials for the gitops repo(s)}, {name: server_name, moduleRef: {id: gitops, output: server_name}, type: string, description: The name of the server, default: default, optional: true}, {name: cluster_type, moduleRef: {id: cluster, output: platform.type_code}}, {name: cluster_ingress_hostname, moduleRef: {id: cluster, output: platform.ingress}}, {name: tls_secret_name, moduleRef: {id: cluster, output: platform.tls_secret}}, {name: namespace, moduleRef: {id: namespace, output: name}, type: string, description: The namespace where the application should be deployed}, {name: kubeseal_cert, moduleRef: {id: gitops, output: sealed_secrets_cert}, type: string, description: The certificate/public key used to encrypt the sealed secrets, default: "", optional: true}, {name: catalog, moduleRef: {id: catalogs, output: catalog_ibmoperators}, type: string, description: The catalog source that should be used to deploy the operator, default: ibm-operator-catalog, optional: true}, {name: sls_key, moduleRef: {id: catalogs, output: entitlement_key}, type: string, description: ibm container entitlement key for sls}, {name: mongo_userid, moduleRef: {id: mongodb, output: username}, type: string, description: 'mongodb admin userid, should stay admin in most cases', default: admin, optional: true}, {name: mongo_dbpass, moduleRef: {id: mongodb, output: password}, type: string, description: mongodb password}, {name: mongo_namespace, moduleRef: {id: mongodb, output: namespace}, type: string, description: namespace for mongo}, {name: mongo_cacrt, moduleRef: {id: mongodb, output: cacrt}, type: string, description: The CA certificate for the mongo instance}, {name: mongo_port, moduleRef: {id: mongodb, output: port}, type: string, description: The port used by the the mongo instance}, {name: mongo_svcname, moduleRef: {id: mongodb, output: svcname}, type: string, description: service name for mongo}, {name: cluster_ingress, type: string, description: Ingress for cluster}, {name: sls_storageClass, type: string, description: Name for sls file storage class}, {name: catalog_namespace, type: string, description: The namespace where the catalog has been deployed, default: openshift-marketplace, optional: true}, {name: channel, type: string, description: The channel that should be used to deploy the operator, default: 3.x, optional: true}], version: v2.0.0, outputs: [{name: instance_name, description: The name of the module}, {name: operator_name, description: The name of the module}, {name: branch, description: The branch where the module config has been placed}, {name: namespace, description: The namespace where the module will be deployed}, {name: server_name, description: The server where the module will be deployed}, {name: layer, description: The layer where the module is deployed}, {name: instance_type, description: The type of module where the module is deployed}, {name: operator_type, description: The type of module where the module is deployed}]}, {platforms: [kubernetes, ocp3, ocp4], providers: [{name: gitops, source: "cloud-native-toolkit/gitops"}], dependencies: [{id: gitops, refs: [{source: github.com/cloud-native-toolkit/terraform-tools-gitops.git, version: ">= 1.1.0"}]}, {id: catalogs, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-cp-catalogs.git, version: ">= 1.0.0"}]}, {id: cluster, refs: [], interface: github.com/cloud-native-toolkit/automation-modules#cluster}, {id: namespace, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-namespace.git, version: ">= 1.0.0"}]}, {id: mongodb, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-mongo-ce, version: ">= 1.0.0"}]}, {id: certmgr, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-ocp-cert-manager, version: ">= 1.0.0"}]}], variables: [{name: gitops_config, moduleRef: {id: gitops, output: gitops_config}, type: "object({\n    boostrap = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    infrastructure = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    services = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    applications = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n  })", description: Config information regarding the gitops repo structure}, {name: git_credentials, moduleRef: {id: gitops, output: git_credentials}, type: "list(object({\n    repo = string\n    url = string\n    username = string\n    token = string\n  }))", description: The credentials for the gitops repo(s)}, {name: server_name, moduleRef: {id: gitops, output: server_name}, type: string, description: The name of the server, default: default, optional: true}, {name: cluster_type, moduleRef: {id: cluster, output: platform.type_code}, type: string, description: The cluster type (openshift or ocp3 or ocp4 or kubernetes), default: ocp4, optional: true}, {name: cluster_ingress_hostname, moduleRef: {id: cluster, output: platform.ingress}, type: string, description: Ingress hostname of the IKS cluster., default: "", optional: true}, {name: tls_secret_name, moduleRef: {id: cluster, output: platform.tls_secret}, type: string, description: The name of the secret containing the tls certificate values, default: "", optional: true}, {name: namespace, moduleRef: {id: namespace, output: name}, type: string, description: The namespace where the application should be deployed}, {name: kubeseal_cert, moduleRef: {id: gitops, output: sealed_secrets_cert}, type: string, description: The certificate/public key used to encrypt the sealed secrets, default: "", optional: true}, {name: catalog, moduleRef: {id: catalogs, output: catalog_ibmoperators}, type: string, description: The catalog source that should be used to deploy the operator, default: ibm-operator-catalog, optional: true}, {name: sls_key, moduleRef: {id: catalogs, output: entitlement_key}, type: string, description: ibm container entitlement key for sls}, {name: mongo_userid, moduleRef: {id: mongodb, output: username}, type: string, description: 'mongodb admin userid, should stay admin in most cases', default: admin, optional: true}, {name: mongo_dbpass, moduleRef: {id: mongodb, output: password}, type: string, description: mongodb password}, {name: mongo_namespace, moduleRef: {id: mongodb, output: namespace}, type: string, description: namespace for mongo}, {name: mongo_cacrt, moduleRef: {id: mongodb, output: cacrt}, type: string, description: The CA certificate for the mongo instance}, {name: mongo_port, moduleRef: {id: mongodb, output: port}, type: string, description: The port used by the the mongo instance}, {name: mongo_svcname, moduleRef: {id: mongodb, output: svcname}, type: string, description: service name for mongo}, {name: certmgr_namespace, moduleRef: {id: certmgr, output: namespace}, type: string, description: The namespace where cert manager has been deployed, default: cert-manager, optional: true}, {name: cluster_config_file, type: string, description: Cluster config file for Kubernetes cluster.}, {name: sls_storageClass, type: string, description: Name for sls file storage class, default: portworx-db2-rwx-sc, optional: true}, {name: catalog_namespace, type: string, description: The namespace where the catalog has been deployed, default: openshift-marketplace, optional: true}, {name: channel, type: string, description: The channel that should be used to deploy the operator, default: 3.x, optional: true}], version: v1.0.1, outputs: [{name: instance_name, description: The name of the module}, {name: operator_name, description: The name of the module}, {name: branch, description: The branch where the module config has been placed}, {name: namespace, description: The namespace where the module will be deployed}, {name: server_name, description: The server where the module will be deployed}, {name: layer, description: The layer where the module is deployed}, {name: instance_type, description: The type of module where the module is deployed}, {name: operator_type, description: The type of module where the module is deployed}]}, {platforms: [kubernetes, ocp3, ocp4], dependencies: [{id: gitops, refs: [{source: github.com/cloud-native-toolkit/terraform-tools-gitops.git, version: ">= 1.1.0"}]}, {id: catalogs, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-cp-catalogs.git, version: ">= 1.0.0"}]}, {id: cluster, refs: [], interface: "github.com/cloud-native-toolkit/automation-modules#cluster"}, {id: namespace, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-namespace.git, version: ">= 1.0.0"}]}, {id: mongodb, refs: [{source: github.com/cloud-native-toolkit/terraform-ocp-mongodb, version: ">= 1.2.0"}]}, {id: certmgr, refs: [{source: github.com/cloud-native-toolkit/terraform-ocp-certmanager, version: ">= 1.0.1"}]}], variables: [{name: gitops_config, moduleRef: {id: gitops, output: gitops_config}, type: "object({\n    boostrap = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    infrastructure = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    services = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    applications = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n  })", description: Config information regarding the gitops repo structure}, {name: git_credentials, moduleRef: {id: gitops, output: git_credentials}, type: "list(object({\n    repo = string\n    url = string\n    username = string\n    token = string\n  }))", description: The credentials for the gitops repo(s)}, {name: server_name, moduleRef: {id: gitops, output: server_name}, type: string, description: The name of the server, default: default, optional: true}, {name: cluster_type, moduleRef: {id: cluster, output: platform.type_code}, type: string, description: The cluster type (openshift or ocp3 or ocp4 or kubernetes), default: ocp4, optional: true}, {name: cluster_ingress_hostname, moduleRef: {id: cluster, output: platform.ingress}, type: string, description: Ingress hostname of the IKS cluster., default: "", optional: true}, {name: tls_secret_name, moduleRef: {id: cluster, output: platform.tls_secret}, type: string, description: The name of the secret containing the tls certificate values, default: "", optional: true}, {name: namespace, moduleRef: {id: namespace, output: name}, type: string, description: The namespace where the application should be deployed}, {name: kubeseal_cert, moduleRef: {id: gitops, output: sealed_secrets_cert}, type: string, description: The certificate/public key used to encrypt the sealed secrets, default: "", optional: true}, {name: catalog, moduleRef: {id: catalogs, output: catalog_ibmoperators}, type: string, description: The catalog source that should be used to deploy the operator, default: ibm-operator-catalog, optional: true}, {name: mongo_dbpass, moduleRef: {id: mongodb, output: mongo_pw}, type: string, description: mongodb password}, {name: mongo_namespace, moduleRef: {id: mongodb, output: mongo_namespace}, type: string, description: namespace for mongo}, {name: mongo_svcname, moduleRef: {id: mongodb, output: mongo_servicename}, type: string, description: service name for mongo}, {name: certmgr_namespace, moduleRef: {id: certmgr, output: cert_namespace}}, {name: cluster_config_file, type: string, description: Cluster config file for Kubernetes cluster.}, {name: sls_key, type: string, description: ibm container entitlement key for sls}, {name: sls_storageClass, type: string, description: Name for sls file storage class, default: portworx-db2-rwx-sc, optional: true}, {name: mongo_userid, type: string, description: 'mongodb admin userid, should stay admin in most cases', default: admin, optional: true}, {name: catalog_namespace, type: string, description: The namespace where the catalog has been deployed, default: openshift-marketplace, optional: true}, {name: channel, type: string, description: The channel that should be used to deploy the operator, default: 3.x, optional: true}], version: v1.0.0}]
